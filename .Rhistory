mutate(unique(dplyr::select(W_EVS, country_wave, country, S020)),
country_wave = factor(country_wave, levels = combined_v))) -> vote_ec_rac
id_viz_vote <- vote_ec_rac %>% mutate(country = droplevels(country))
## Create separate variables for each wave- self ideo
id_list <- id_ec_rac %>% dlply("country")
lapply(id_list, function(x) {
return(data.frame(wave_no = seq(1:nrow(x)), country_wave = x[1]))
}) %>%
do.call(rbind.data.frame, .) %>%
left_join(id_ec_rac, .) -> id_ec_rac
dplyr::select(id_ec_rac, s_id_econ, wave_no, country) %>%
spread(wave_no, s_id_econ) -> econ_waves
names(econ_waves) <- c("country", "id_ec_1", "id_ec_2", "id_ec_3",
"id_ec_4", "id_ec_5", "id_ec_6")
dplyr::select(id_ec_rac, s_id_rac, wave_no, country) %>%
spread(wave_no, s_id_rac) -> rac_waves
names(rac_waves) <- c("country", "id_rac_1", "id_rac_2", "id_rac_3",
"id_rac_4", "id_rac_5", "id_rac_6")
dplyr::select(id_ec_rac, country_wave, wave_no, country) %>%
spread(wave_no, country_wave) -> c_waves
names(c_waves) <- c("country", "wav_1", "wav_2", "wav_3", "wav_4", "wav_5", "wav_6")
left_join(id_ec_rac, econ_waves) %>%
left_join(rac_waves) %>%
left_join(c_waves) -> id_viz
id_viz <- id_viz %>% mutate(country = droplevels(country))
## App
# UI
ui <- navbarPage("Ideology",
tabPanel("Self-Placement",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country),
selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))),
tabPanel("Voting",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Voting Ideology"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup_vote", label = "Country",
choices = levels(id_viz_vote$country),
selected = c("Poland", "Czech Republic",
"Sweden", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot_vote"), width = 10))))
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
vote_data <- reactive({
dat_v <- filter(id_viz_vote)
if (is.null(dat_v))
return(NULL)
if (!is.null(input$checkGroup_vote))
dat_v <- dat_v[dat_v$country %in% input$checkGroup_vote, ]
return(dat_v)
})
output$plot_vote <- renderggiraph({
vote_data() %>%
ggplot(aes(x = v_id_econ, y = v_id_rac, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz_vote$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot") +
scale_x_continuous("Correlation of economic ideology with voting intention",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with voting intention", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot_v
girafe(code = print(gg_plot_v), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
?geom_point_interactive
?geom_point
## App
# UI
ui <- navbarPage("Ideology",
tabPanel("Self-Placement",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country),
selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))),
tabPanel("Voting",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Voting Ideology"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup_vote", label = "Country",
choices = levels(id_viz_vote$country),
selected = c("Poland", "Czech Republic",
"Sweden", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot_vote"), width = 10))))
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
vote_data <- reactive({
dat_v <- filter(id_viz_vote)
if (is.null(dat_v))
return(NULL)
if (!is.null(input$checkGroup_vote))
dat_v <- dat_v[dat_v$country %in% input$checkGroup_vote, ]
return(dat_v)
})
output$plot_vote <- renderggiraph({
vote_data() %>%
ggplot(aes(x = v_id_econ, y = v_id_rac, color = country)) +
geom_point_interactive(aes(tooltip = country_wave), size = 5) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz_vote$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot") +
scale_x_continuous("Correlation of economic ideology with voting intention",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with voting intention", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot_v
girafe(code = print(gg_plot_v), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
## App
# UI
ui <- navbarPage("Ideology",
tabPanel("Self-Placement",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country),
selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))),
tabPanel("Voting",
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Voting Ideology"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup_vote", label = "Country",
choices = levels(id_viz_vote$country),
selected = c("Poland", "Czech Republic",
"Sweden", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot_vote"), width = 10))))
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
vote_data <- reactive({
dat_v <- filter(id_viz_vote)
if (is.null(dat_v))
return(NULL)
if (!is.null(input$checkGroup_vote))
dat_v <- dat_v[dat_v$country %in% input$checkGroup_vote, ]
return(dat_v)
})
output$plot_vote <- renderggiraph({
vote_data() %>%
ggplot(aes(x = v_id_econ, y = v_id_rac, color = country)) +
geom_point_interactive(aes(tooltip = country_wave), size = 3) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz_vote$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot") +
scale_x_continuous("Correlation of economic ideology with voting intention",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with voting intention", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot_v
girafe(code = print(gg_plot_v), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
table(W_EVS$vote_ideo)
# Load packages
library(tidyverse)
library(ggrepel)
library(survey)
library(rvest)
library(plyr)
library(broom)
library(knitr)
library(stargazer)
# Import data
Raw <- read.csv(unz("W_EVS.csv.zip", "W_EVS.csv"))
W_EVS <- Raw
names(W_EVS)
table(W_EVS$E181_01)
table(W_EVS$E181_01, useNA = "ifany")
# Import country codes
wvs_git <- read_html("https://github.com/xmarquez/WorldValuesSurvey/blob/master/Country%20codes%20for%20WVS%20wave%206.csv")
countryCodes <- wvs_git %>%
html_nodes(".js-csv-data") %>%
html_table(header = TRUE)
countryCodes <- countryCodes[[1]]
countryCodes <- countryCodes %>% select(-c(1))
# Replace country codes with countries
W_EVS <- W_EVS %>% left_join(countryCodes, by = c("S003" = "V2"))
W_EVS <- W_EVS %>% mutate(country = replace(country, country == "Czech Rep.", "Czech Republic"))
W_EVS <- W_EVS %>% mutate(country = replace(country, country == "North Ireland", "Northern Ireland"))
names(W_EVS)
table(W_EVS$country)
table(W_EVS$E181_01, W_EVS$country, useNA = "ifany")
# Import OECD countries
wiki <- read_html("https://en.wikipedia.org/wiki/OECD")
OECD <- wiki %>%
html_nodes("table.wikitable:nth-child(71)") %>%
html_table(header = TRUE)
OECD <- OECD[[1]]
# Filter OECD countries
W_EVS <- W_EVS %>% filter(country %in% OECD$Country | country == "Great Britain" | country == "Northern Ireland")
# Load packages
library(tidyverse)
library(ggrepel)
library(survey)
library(rvest)
library(plyr)
library(broom)
library(knitr)
library(stargazer)
# Import country codes
wvs_git <- read_html("https://github.com/xmarquez/WorldValuesSurvey/blob/master/Country%20codes%20for%20WVS%20wave%206.csv")
countryCodes <- wvs_git %>%
html_nodes(".js-csv-data") %>%
html_table(header = TRUE)
countryCodes <- countryCodes[[1]]
countryCodes <- countryCodes %>% select(-c(1))
# Replace country codes with countries
W_EVS <- W_EVS %>% left_join(countryCodes, by = c("S003" = "V2"))
W_EVS <- W_EVS %>% mutate(country = replace(country, country == "Czech Rep.", "Czech Republic"))
W_EVS <- W_EVS %>% mutate(country = replace(country, country == "North Ireland", "Northern Ireland"))
# Import OECD countries
wiki <- read_html("https://en.wikipedia.org/wiki/OECD")
OECD <- wiki %>%
html_nodes("table.wikitable:nth-child(71)") %>%
html_table(header = TRUE)
OECD <- OECD[[1]]
# Filter OECD countries
W_EVS <- W_EVS %>% filter(country %in% OECD$Country | country == "Great Britain" | country == "Northern Ireland")
# Creation of country-wave variable
W_EVS <- W_EVS %>% mutate(country_wave = paste(country, S020))
table(W_EVS$E181_01, W_EVS$country_wave, useNA = "ifany")
table(filter(W_EVS, country == "Germany")$E181_01, filter(W_EVS, country == "Germany")$country_wave, useNA = "ifany")
names(W_EVS)
filter(W_EVS, country == "Germany") %>%
table(.$E181_01, .$country_wave, useNA = "ifany")
select(W_EVS, -23) %>%
filter(W_EVS, country == "Germany") %>%
table(.$E181_01, .$country_wave, useNA = "ifany")
dplyr::select(W_EVS, -c(23)) %>%
filter(country == "Germany") %>%
table(.$E181_01, .$country_wave, useNA = "ifany")
dplyr::select(W_EVS, -23) %>%
filter(country == "Germany") %>%
table(.$E181_01, .$country_wave, useNA = "ifany")
dplyr::select(W_EVS, -23) %>%
filter(country == "Germany") %>%
unique(.$country_wave)
dplyr::select(W_EVS, -23) %>%
dim()
dim(W_EVS)
dplyr::select(W_EVS, -23) %>%
filter(country == "Germany") %>%
dim()
dplyr::select(W_EVS, -23) %>%
filter(country == "Germany") %>%
class()
dplyr::select(W_EVS, -23) %>%
filter(country == "Germany") -> Deu
table(Deu$E181_01, Deu$country_wave, useNA = "ifany")
names(Deu)
table(Deu$E179_01, Deu$country_wave, useNA = "ifany")
# Load packages & data
library(shiny)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(survey)
library(rvest)
library(plyr)
library(broom)
library(knitr)
library(RCurl)
library(devtools)
library(ggiraph)
library(ggiraphExtra)
library(MASS)
library(car)
url <- getURL("https://raw.githubusercontent.com/Jklein29/internationalLeft/master/WVS_viz_vars.csv")
W_EVS <- read.csv(text = url)
names(W_EVS)
url_og <- getURL("https://raw.githubusercontent.com/jordan-klein/internationalLeft/master/WVS_viz_vars.csv")
W_EVS_og <- read.csv(text = url_og)
url <- getURL("https://raw.githubusercontent.com/jordan-klein/internationalLeft/master/W_EVS_clean.csv")
W_EVS <- read.csv(text = url)
names(W_EVS)
levels(W_EVS$RacRes)
W_EVS <- W_EVS %>% mutate(RacRes = factor(RacRes, levels = c("Very low", "Low", "Moderate", "High", "Very high")))
levels(W_EVS$RacRes)
cw_list <- W_EVS %>% dlply('country_wave')
lapply(cw_list, function(x) {
polr(RacRes ~ ec_ideo, data = x, weights = S017, Hess = T) %>%
predict(x, type = "probs") %>%
cbind(dplyr::select(x, country, ec_ideo), .) %>%
reshape2::melt(id.vars = c("country", "ec_ideo"),
variable.name = "Resentment_level", value.name = "Probability")
}) %>%
do.call(rbind.data.frame, .) -> W_EVS_probs
names(W_EVS)
lapply(cw_list, function(x) {
polr(RacRes ~ ec_ideo, data = x, weights = S017, Hess = T) %>%
predict(x, type = "probs") %>%
cbind(dplyr::select(x, country_wave, ec_ideo), .) %>%
reshape2::melt(id.vars = c("country_wave", "ec_ideo"),
variable.name = "Resentment_level", value.name = "Probability")
}) %>%
do.call(rbind.data.frame, .) -> W_EVS_probs
lapply(cw_list, function(x) {
polr(RacRes ~ ec_ideo, data = x, weights = S017, Hess = T)
})
lapply(cw_list, dim)
V9ew(lapply(cw_list, dim))
View(lapply(cw_list, dim))
View(as.data.frame(lapply(cw_list, dim)))
lapply(cw_list, function(x) {
polr(RacRes ~ ec_ideo, data = x, weights = S017, Hess = T)
})
filter(W_EVS, !is.na(ec_ideo) & !is.na(RacRes)) %>%
mutate(country_wave = droplevels(country_wave)) -> W_EVS
cw_list <- W_EVS %>% dlply('country_wave')
lapply(cw_list, function(x) {
polr(RacRes ~ ec_ideo, data = x, weights = S017, Hess = T) %>%
predict(x, type = "probs") %>%
cbind(dplyr::select(x, country_wave, ec_ideo), .) %>%
reshape2::melt(id.vars = c("country_wave", "ec_ideo"),
variable.name = "Resentment_level", value.name = "Probability")
}) %>%
do.call(rbind.data.frame, .) -> W_EVS_probs
warnings()
names(W_EVS_probs)
# Define UI
ui_2 <- fluidPage(
titlePanel("Economic Ideology and Racial Resentment"),
sidebarLayout(position = "right",
sidebarPanel(
selectInput("country_wave", label = "Country",
choices = levels(W_EVS_probs$country_wave), selected = "United States 2011")),
mainPanel(
plotOutput("scatterplot"))))
# Define server
server_2 <- function(input, output) {
filtered <- reactive({
W_EVS_probs %>% filter(country_wave == input$country_wave)
})
output$scatterplot <- renderPlot({
filtered() %>%
ggplot(aes(x = ec_ideo, y = Probability, colour = Resentment_level)) + geom_line() +
labs(caption = "Ordinal logistic regression plots") +
scale_x_continuous("Economic Ideology (left to right)", breaks = c(0, .25, .5, .75, 1)) +
scale_y_continuous("Probability", breaks = c(0, .2, .4, .6, .8)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, .8))
})
}
# Run the application
shinyApp(ui = ui_2, server = server_2)
lapply(cw_list, dim)
