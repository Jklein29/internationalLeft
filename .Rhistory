name = "Country", drop = F) -> gg_plot
girafe(code = print(gg_plot), width_svg = 15)
})
plot_data_adj <- reactive({
dat_adj <- filter(rac_ec_adj)
if (is.null(dat_adj))
return(NULL)
if (!is.null(input$checkGroup_adj))
dat_adj <- dat_adj[dat_adj$country %in% input$checkGroup_adj, ]
return(dat_adj)
})
output$plot_adj <- renderggiraph({
plot_data_adj() %>%
ggplot(aes(x = S020, y = rac_ec_adj, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
geom_path(arrow = arrow(length = unit(.1, "inches"))) +
labs(caption = "Ordinal logistic regression coefficients, higher coefficients indicate greater effects") +
scale_y_continuous("Effect of economic ideology on racial resentment", breaks = c(-2.5, -2, -1.5, -1, -.5, 0, .5, 1, 1.5, 2, 2.5)) +
scale_x_date("Year", date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1990-01-01", "2013-01-01"))) +
theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14),
legend.title = element_text(size = 9.5), legend.text = element_text(size = 7.5),
legend.key.size = unit(.1, "inches"), axis.text.x = element_text(size = 7.9),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_line(color = "black", size = .25),
plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_cartesian(xlim = c(as.Date(c("1991-01-01", "2012-01-01"))), ylim = c(-2.5, 2.5)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(rac_ec_adj$country)))),
name = "Country", drop = F) -> gg_plot_adj
girafe(code = print(gg_plot_adj), width_svg = 15)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# UI
ui <- navbarPage("Model selection",
tabPanel("Unadjusted model",
titlePanel("Economic Ideology and Racial Resentment Over Time"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(rac_ec$country),
selected = c("Poland", "Australia",
"France", "Germany",
"Great Britain", "Slovenia",
"Mexico", "Sweden", "United States")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))),
tabPanel("Adjusted for education & religion",
titlePanel("Economic Ideology and Racial Resentment Over Time"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup_adj", label = "Country",
choices = levels(rac_ec_adj$country),
selected = c("Poland", "Australia",
"France", "Germany",
"Great Britain", "Slovenia",
"Mexico", "Sweden", "United States")),
width = 2),
mainPanel(ggiraphOutput("plot_adj"), width = 10))))
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(rac_ec)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = S020, y = rac_ec, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
geom_path(arrow = arrow(length = unit(.1, "inches"))) +
labs(caption = "Ordinal logistic regression coefficients, higher coefficients indicate greater effects") +
scale_y_continuous("Effect of economic ideology on racial resentment",
breaks = c(-2.5, -2, -1.5, -1, -.5, 0, .5, 1, 1.5, 2, 2.5)) +
scale_x_date("Year", date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1990-01-01", "2013-01-01"))) +
theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14),
legend.title = element_text(size = 9.5), legend.text = element_text(size = 7.5),
legend.key.size = unit(.1, "inches"), axis.text.x = element_text(size = 7.9),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_line(color = "black", size = .25),
plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_cartesian(xlim = c(as.Date(c("1991-01-01", "2012-01-01"))), ylim = c(-2.5, 2.5)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(rac_ec$country)))),
name = "Country", drop = F) -> gg_plot
girafe(code = print(gg_plot), width_svg = 15)
})
plot_data_adj <- reactive({
dat_adj <- filter(rac_ec_adj)
if (is.null(dat_adj))
return(NULL)
if (!is.null(input$checkGroup_adj))
dat_adj <- dat_adj[dat_adj$country %in% input$checkGroup_adj, ]
return(dat_adj)
})
output$plot_adj <- renderggiraph({
plot_data_adj() %>%
ggplot(aes(x = S020, y = rac_ec_adj, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
geom_path(arrow = arrow(length = unit(.1, "inches"))) +
labs(caption = "Ordinal logistic regression coefficients, higher coefficients indicate greater effects") +
scale_y_continuous("Effect of economic ideology on racial resentment",
breaks = c(-2.5, -2, -1.5, -1, -.5, 0, .5, 1, 1.5, 2, 2.5)) +
scale_x_date("Year", date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1990-01-01", "2013-01-01"))) +
theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14),
legend.title = element_text(size = 9.5), legend.text = element_text(size = 7.5),
legend.key.size = unit(.1, "inches"), axis.text.x = element_text(size = 7.9),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_line(color = "black", size = .25),
plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_cartesian(xlim = c(as.Date(c("1991-01-01", "2012-01-01"))), ylim = c(-2.5, 2.5)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(rac_ec_adj$country)))),
name = "Country", drop = F) -> gg_plot_adj
girafe(code = print(gg_plot_adj), width_svg = 15)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# UI
ui <- navbarPage("Model selection",
tabPanel("Unadjusted model",
titlePanel("Economic Ideology and Racial Resentment Over Time"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(rac_ec$country),
selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))),
tabPanel("Adjusted for education & religion",
titlePanel("Economic Ideology and Racial Resentment Over Time"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup_adj", label = "Country",
choices = levels(rac_ec_adj$country),
selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot_adj"), width = 10))))
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(rac_ec)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = S020, y = rac_ec, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
geom_path(arrow = arrow(length = unit(.1, "inches"))) +
labs(caption = "Ordinal logistic regression coefficients, higher coefficients indicate greater effects") +
scale_y_continuous("Effect of economic ideology on racial resentment",
breaks = c(-2.5, -2, -1.5, -1, -.5, 0, .5, 1, 1.5, 2, 2.5)) +
scale_x_date("Year", date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1990-01-01", "2013-01-01"))) +
theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14),
legend.title = element_text(size = 9.5), legend.text = element_text(size = 7.5),
legend.key.size = unit(.1, "inches"), axis.text.x = element_text(size = 7.9),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_line(color = "black", size = .25),
plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_cartesian(xlim = c(as.Date(c("1991-01-01", "2012-01-01"))), ylim = c(-2.5, 2.5)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(rac_ec$country)))),
name = "Country", drop = F) -> gg_plot
girafe(code = print(gg_plot), width_svg = 15)
})
plot_data_adj <- reactive({
dat_adj <- filter(rac_ec_adj)
if (is.null(dat_adj))
return(NULL)
if (!is.null(input$checkGroup_adj))
dat_adj <- dat_adj[dat_adj$country %in% input$checkGroup_adj, ]
return(dat_adj)
})
output$plot_adj <- renderggiraph({
plot_data_adj() %>%
ggplot(aes(x = S020, y = rac_ec_adj, color = country)) +
geom_point_interactive(aes(tooltip = country_wave)) +
geom_path(arrow = arrow(length = unit(.1, "inches"))) +
labs(caption = "Ordinal logistic regression coefficients, higher coefficients indicate greater effects") +
scale_y_continuous("Effect of economic ideology on racial resentment",
breaks = c(-2.5, -2, -1.5, -1, -.5, 0, .5, 1, 1.5, 2, 2.5)) +
scale_x_date("Year", date_breaks = "1 year", date_labels = "%Y", limits = as.Date(c("1990-01-01", "2013-01-01"))) +
theme(axis.title.x = element_text(size = 14), axis.title.y = element_text(size = 14),
legend.title = element_text(size = 9.5), legend.text = element_text(size = 7.5),
legend.key.size = unit(.1, "inches"), axis.text.x = element_text(size = 7.9),
axis.text.y = element_text(size = 7),
panel.grid.major.x = element_line(color = "black", size = .25),
plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_cartesian(xlim = c(as.Date(c("1991-01-01", "2012-01-01"))), ylim = c(-2.5, 2.5)) +
scale_color_manual(values = c(rainbow_hcl(length(unique(rac_ec_adj$country)))),
name = "Country", drop = F) -> gg_plot_adj
girafe(code = print(gg_plot_adj), width_svg = 15)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load packages & data
library(shiny)
library(ggplot2)
library(tidyverse)
library(ggrepel)
library(survey)
library(rvest)
library(plyr)
library(broom)
library(knitr)
library(RCurl)
library(stargazer)
library(reshape2)
library(gridExtra)
library(ggiraph)
library(colorspace)
library(wCorr)
url <- getURL("https://raw.githubusercontent.com/jordan-klein/internationalLeft/master/W_EVS_clean.csv")
W_EVS <- read.csv(text = url)
cw_list <- W_EVS %>% dlply('country_wave')
# Create coefficient matrix
lapply(cw_list, function(x) {
filter(x, !is.na(self_ideo) & !is.na(ec_ideo))
}) %>%
.[sapply(., function(x) {
dim(x)[1] > 0
})] %>%
lapply(function(x) {
corr <- weightedCorr(x$ec_ideo, x$self_ideo, "Pearson", x$S017)
return(data.frame(s_id_econ = corr))
}) %>%
do.call(rbind.data.frame, .) %>%
data.frame(country_wave = row.names(.), .) -> s_id_econ
lapply(cw_list, function(x) {
filter(x, !is.na(self_ideo) & !is.na(RacRes_n))
}) %>%
.[sapply(., function(x) {
dim(x)[1] > 0
})] %>%
lapply(function(x) {
corr <- weightedCorr(x$RacRes_n, x$self_ideo, "Pearson", x$S017)
return(data.frame(s_id_rac = corr))
}) %>%
do.call(rbind.data.frame, .) %>%
data.frame(country_wave = row.names(.), .) -> s_id_rac
id_ec_rac <- inner_join(s_id_econ, s_id_rac)
combined <- sort(union(levels(W_EVS$country_wave), levels(id_ec_rac$country_wave)))
left_join(mutate(id_ec_rac, country_wave = factor(country_wave, levels = combined)),
mutate(unique(dplyr::select(W_EVS, country_wave, country, S020)),
country_wave = factor(country_wave, levels = combined))) -> id_ec_rac
## Create separate variables for each wave
id_list <- id_ec_rac %>% dlply("country")
lapply(id_list, function(x) {
return(data.frame(wave_no = seq(1:nrow(x)), country_wave = x[1]))
}) %>%
do.call(rbind.data.frame, .) %>%
left_join(id_ec_rac, .) -> id_ec_rac
select(id_ec_rac, s_id_econ, wave_no, country) %>%
spread(wave_no, s_id_econ) -> econ_waves
names(econ_waves) <- c("country", "id_ec_1", "id_ec_2", "id_ec_3",
"id_ec_4", "id_ec_5", "id_ec_6")
select(id_ec_rac, s_id_rac, wave_no, country) %>%
spread(wave_no, s_id_rac) -> rac_waves
names(rac_waves) <- c("country", "id_rac_1", "id_rac_2", "id_rac_3",
"id_rac_4", "id_rac_5", "id_rac_6")
select(id_ec_rac, country_wave, wave_no, country) %>%
spread(wave_no, country_wave) -> c_waves
names(c_waves) <- c("country", "wav_1", "wav_2", "wav_3", "wav_4", "wav_5", "wav_6")
left_join(id_ec_rac, econ_waves) %>%
left_join(rac_waves) %>%
left_join(c_waves) -> id_viz
id_viz <- id_viz %>% mutate(country = droplevels(country))
# UI
ui <- fluidPage(
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country), selected = levels(id_viz$country)),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))
)
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Create coefficient matrix
lapply(cw_list, function(x) {
filter(x, !is.na(self_ideo) & !is.na(ec_ideo))
}) %>%
.[sapply(., function(x) {
dim(x)[1] > 0
})] %>%
lapply(function(x) {
corr <- weightedCorr(x$ec_ideo, x$self_ideo, "Pearson", x$S017)
return(data.frame(s_id_econ = corr))
}) %>%
do.call(rbind.data.frame, .) %>%
data.frame(country_wave = row.names(.), .) -> s_id_econ
lapply(cw_list, function(x) {
filter(x, !is.na(self_ideo) & !is.na(RacRes_n))
}) %>%
.[sapply(., function(x) {
dim(x)[1] > 0
})] %>%
lapply(function(x) {
corr <- weightedCorr(x$RacRes_n, x$self_ideo, "Pearson", x$S017)
return(data.frame(s_id_rac = corr))
}) %>%
do.call(rbind.data.frame, .) %>%
data.frame(country_wave = row.names(.), .) -> s_id_rac
id_ec_rac <- inner_join(s_id_econ, s_id_rac)
combined <- sort(union(levels(W_EVS$country_wave), levels(id_ec_rac$country_wave)))
left_join(mutate(id_ec_rac, country_wave = factor(country_wave, levels = combined)),
mutate(unique(dplyr::select(W_EVS, country_wave, country, S020)),
country_wave = factor(country_wave, levels = combined))) -> id_ec_rac
## Create separate variables for each wave
id_list <- id_ec_rac %>% dlply("country")
lapply(id_list, function(x) {
return(data.frame(wave_no = seq(1:nrow(x)), country_wave = x[1]))
}) %>%
do.call(rbind.data.frame, .) %>%
left_join(id_ec_rac, .) -> id_ec_rac
dplyr::select(id_ec_rac, s_id_econ, wave_no, country) %>%
spread(wave_no, s_id_econ) -> econ_waves
names(econ_waves) <- c("country", "id_ec_1", "id_ec_2", "id_ec_3",
"id_ec_4", "id_ec_5", "id_ec_6")
dplyr::select(id_ec_rac, s_id_rac, wave_no, country) %>%
spread(wave_no, s_id_rac) -> rac_waves
names(rac_waves) <- c("country", "id_rac_1", "id_rac_2", "id_rac_3",
"id_rac_4", "id_rac_5", "id_rac_6")
dplyr::select(id_ec_rac, country_wave, wave_no, country) %>%
spread(wave_no, country_wave) -> c_waves
names(c_waves) <- c("country", "wav_1", "wav_2", "wav_3", "wav_4", "wav_5", "wav_6")
left_join(id_ec_rac, econ_waves) %>%
left_join(rac_waves) %>%
left_join(c_waves) -> id_viz
id_viz <- id_viz %>% mutate(country = droplevels(country))
# UI
ui <- fluidPage(
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country), selected = levels(id_viz$country)),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))
)
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Correlation of Economic Ideology vs. Racial Resentment with Ideological Self-Placement"),
sidebarLayout(position = "right",
sidebarPanel(
checkboxGroupInput("checkGroup", label = "Country",
choices = levels(id_viz$country), selected = c("Poland", "Czech Republic",
"United States", "Sweden",
"Mexico", "Germany")),
width = 2),
mainPanel(ggiraphOutput("plot"), width = 10))
)
# Server
server <- function(input, output) {
plot_data <- reactive({
dat <- filter(id_viz)
if (is.null(dat))
return(NULL)
if (!is.null(input$checkGroup))
dat <- dat[dat$country %in% input$checkGroup, ]
return(dat)
})
output$plot <- renderggiraph({
plot_data() %>%
ggplot(aes(x = s_id_econ, y = s_id_rac, color = country)) +
geom_point_interactive(aes(x = id_ec_1, y = id_rac_1, tooltip = wav_1)) +
geom_point_interactive(aes(x = id_ec_2, y = id_rac_2, tooltip = wav_2)) +
geom_point_interactive(aes(x = id_ec_3, y = id_rac_3, tooltip = wav_3)) +
geom_point_interactive(aes(x = id_ec_4, y = id_rac_4, tooltip = wav_4)) +
geom_point_interactive(aes(x = id_ec_5, y = id_rac_5, tooltip = wav_5)) +
geom_point_interactive(aes(x = id_ec_6, y = id_rac_6, tooltip = wav_6)) +
geom_segment(aes(x = id_ec_1, y = id_rac_1,
xend = id_ec_2, yend = id_rac_2),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_2, y = id_rac_2,
xend = id_ec_3, yend = id_rac_3),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_3, y = id_rac_3,
xend = id_ec_4, yend = id_rac_4),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_4, y = id_rac_4,
xend = id_ec_5, yend = id_rac_5),
arrow = arrow(length = unit(.1, "inches"))) +
geom_segment(aes(x = id_ec_5, y = id_rac_5,
xend = id_ec_6, yend = id_rac_6),
arrow = arrow(length = unit(.1, "inches"))) +
scale_color_manual(values = c(rainbow_hcl(length(unique(id_viz$country)))),
name = "Country", drop = F) +
labs(caption = "Scatterplot with trends over time") +
scale_x_continuous("Correlation of economic ideology with self-placement",
breaks = c(-.1, 0, .1, .2, .3, .4, .5, .6)) +
scale_y_continuous("Correlation of racial resentment with self-placement", breaks = c(-.1, 0, .1, .2, .3, .4)) +
theme(axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15),
legend.title = element_text(size = 10), legend.text = element_text(size = 8),
legend.key.size = unit(.1, "inches")) +
coord_cartesian(xlim = c(-.15, .65), ylim = c(-.15, .4)) -> gg_plot
girafe(code = print(gg_plot), width_svg = 14, height_svg = 7)
})
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("RcppArmadillo")
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "Cairo", "cairoDevice", "callr", "caTools", "checkmate", "class", "classInt", "clipr", "cluster", "coda", "codetools", "commonmark", "countrycode", "curl", "data.table", "DataEntry", "dbplyr", "desc", "devtools", "digest", "doParallel", "dplyr", "e1071", "fansi", "fmsb", "forcats", "foreach", "foreign", "formatR", "Formula", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggforce", "ggplot2", "ggthemes", "git2r", "glue", "gridExtra", "gtable", "gWidgets", "gWidgetsRGtk2", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "httr", "igraph", "irlba", "iterators", "jqr", "labelled", "lattice", "lazyeval", "lme4", "magic", "mapproj", "maps", "maptools", "markdown", "MASS", "Matching", "Matrix", "memoise", "meta", "metafor", "mgcv", "mime", "modelr", "munsell", "netmeta", "NMF", "officer", "openssl", "pillar", "pkgmaker", "pracma", "processx", "progress", "protolite", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "registry", "reprex", "rgdal", "rgeos", "Rglpk", "rjags", "rJava", "rlang", "rmapshaper", "rngtools", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rvest", "rvg", "sandwich", "scales", "selectr", "sensitivity", "sf", "sjmisc", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tm", "tweenr", "units", "V8", "viridis", "viridisLite", "wordcloud", "XLConnect", "XLConnectJars", "xlsx", "XML", "xml2", "xtable", "zip", "zoo", "ztable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "Cairo", "cairoDevice", "callr", "caTools", "checkmate", "class", "classInt", "clipr", "cluster", "coda", "codetools", "commonmark", "countrycode", "curl", "data.table", "DataEntry", "dbplyr", "desc", "devtools", "digest", "doParallel", "dplyr", "e1071", "fansi", "fmsb", "forcats", "foreach", "foreign", "formatR", "Formula", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggforce", "ggplot2", "ggthemes", "git2r", "glue", "gridExtra", "gtable", "gWidgets", "gWidgetsRGtk2", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "httr", "igraph", "irlba", "iterators", "jqr", "labelled", "lattice", "lazyeval", "lme4", "magic", "mapproj", "maps", "maptools", "markdown", "MASS", "Matching", "Matrix", "memoise", "meta", "metafor", "mgcv", "mime", "modelr", "munsell", "netmeta", "NMF", "officer", "openssl", "pillar", "pkgmaker", "pracma", "processx", "progress", "protolite", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "registry", "reprex", "rgdal", "rgeos", "Rglpk", "rjags", "rJava", "rlang", "rmapshaper", "rngtools", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rvest", "rvg", "sandwich", "scales", "selectr", "sensitivity", "sf", "sjmisc", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tm", "tweenr", "units", "V8", "viridis", "viridisLite", "wordcloud", "XLConnect", "XLConnectJars", "xlsx", "XML", "xml2", "xtable", "zip", "zoo", "ztable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "Cairo", "cairoDevice", "callr", "caTools", "checkmate", "class", "classInt", "clipr", "cluster", "coda", "codetools", "commonmark", "countrycode", "curl", "data.table", "DataEntry", "dbplyr", "desc", "devtools", "digest", "doParallel", "dplyr", "e1071", "fansi", "fmsb", "forcats", "foreach", "foreign", "formatR", "Formula", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggforce", "ggplot2", "ggthemes", "git2r", "glue", "gridExtra", "gtable", "gWidgets", "gWidgetsRGtk2", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "httr", "igraph", "irlba", "iterators", "jqr", "labelled", "lattice", "lazyeval", "lme4", "magic", "mapproj", "maps", "maptools", "markdown", "MASS", "Matching", "Matrix", "memoise", "meta", "metafor", "mgcv", "mime", "modelr", "munsell", "netmeta", "NMF", "officer", "openssl", "pillar", "pkgmaker", "pracma", "processx", "progress", "protolite", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "registry", "reprex", "rgdal", "rgeos", "Rglpk", "rjags", "rJava", "rlang", "rmapshaper", "rngtools", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rvest", "rvg", "sandwich", "scales", "selectr", "sensitivity", "sf", "sjmisc", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tm", "tweenr", "units", "V8", "viridis", "viridisLite", "wordcloud", "XLConnect", "XLConnectJars", "xlsx", "XML", "xml2", "xtable", "zip", "zoo", "ztable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "Cairo", "cairoDevice", "callr", "caTools", "checkmate", "class", "classInt", "clipr", "cluster", "coda", "codetools", "commonmark", "countrycode", "curl", "data.table", "DataEntry", "dbplyr", "desc", "devtools", "digest", "doParallel", "dplyr", "e1071", "fansi", "fmsb", "forcats", "foreach", "foreign", "formatR", "Formula", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggforce", "ggplot2", "ggthemes", "git2r", "glue", "gridExtra", "gtable", "gWidgets", "gWidgetsRGtk2", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "httr", "igraph", "irlba", "iterators", "jqr", "labelled", "lattice", "lazyeval", "lme4", "magic", "mapproj", "maps", "maptools", "markdown", "MASS", "Matching", "Matrix", "memoise", "meta", "metafor", "mgcv", "mime", "modelr", "munsell", "netmeta", "NMF", "officer", "openssl", "pillar", "pkgmaker", "pracma", "processx", "progress", "protolite", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "registry", "reprex", "rgdal", "rgeos", "Rglpk", "rjags", "rJava", "rlang", "rmapshaper", "rngtools", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rvest", "rvg", "sandwich", "scales", "selectr", "sensitivity", "sf", "sjmisc", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tm", "tweenr", "units", "V8", "viridis", "viridisLite", "wordcloud", "XLConnect", "XLConnectJars", "xlsx", "XML", "xml2", "xtable", "zip", "zoo", "ztable"))
install.packages(c("assertthat", "backports", "BH", "boot", "broom", "Cairo", "cairoDevice", "callr", "caTools", "checkmate", "class", "classInt", "clipr", "cluster", "coda", "codetools", "commonmark", "countrycode", "curl", "data.table", "DataEntry", "dbplyr", "desc", "devtools", "digest", "doParallel", "dplyr", "e1071", "fansi", "fmsb", "forcats", "foreach", "foreign", "formatR", "Formula", "gdtools", "geojson", "geojsonio", "geojsonlint", "ggforce", "ggplot2", "ggthemes", "git2r", "glue", "gridExtra", "gtable", "gWidgets", "gWidgetsRGtk2", "haven", "hexbin", "highr", "Hmisc", "hms", "htmlTable", "httr", "igraph", "irlba", "iterators", "jqr", "labelled", "lattice", "lazyeval", "lme4", "magic", "mapproj", "maps", "maptools", "markdown", "MASS", "Matching", "Matrix", "memoise", "meta", "metafor", "mgcv", "mime", "modelr", "munsell", "netmeta", "NMF", "officer", "openssl", "pillar", "pkgmaker", "pracma", "processx", "progress", "protolite", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "registry", "reprex", "rgdal", "rgeos", "Rglpk", "rjags", "rJava", "rlang", "rmapshaper", "rngtools", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rvest", "rvg", "sandwich", "scales", "selectr", "sensitivity", "sf", "sjmisc", "sourcetools", "sp", "stargazer", "stringdist", "stringi", "stringr", "survey", "survival", "testthat", "tibble", "tidyr", "tidyselect", "tm", "tweenr", "units", "V8", "viridis", "viridisLite", "wordcloud", "XLConnect", "XLConnectJars", "xlsx", "XML", "xml2", "xtable", "zip", "zoo", "ztable"))
